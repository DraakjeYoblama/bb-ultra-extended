---
permalink: module-loader.js
---
const includedModules = {{ includedModules | stringify | safe }};

// Create the array of content script parameters from includedModules and the settings
async function includeModuleParams(includedModules) {
    const includedModuleParams = [];
    for (const [module, moduleObj] of Object.entries(includedModules)) {
        try {
            const result = await browser.storage.sync.get(moduleObj.contentScriptParams.id);
            if (result[moduleObj.contentScriptParams.id] === undefined || result[moduleObj.contentScriptParams.id].enabled === undefined) {
                // if setting is undefined, check if the module is enabled by default
                // save the default value to settings
                await browser.storage.sync.set({ [moduleObj.contentScriptParams.id]: { enabled: moduleObj.options.enable } });
                console.log(`Applied default value for ${moduleObj.contentScriptParams.id}: ${moduleObj.options.enable}`);
                // also add module
                if (moduleObj.options.enable) {
                    includedModuleParams.push(moduleObj.contentScriptParams);
                }
            } else if (result[moduleObj.contentScriptParams.id].enabled) {
                // if setting is defined, use it
                includedModuleParams.push(moduleObj.contentScriptParams);
            }
        } catch (err) {
            console.error(`Failed to get settings: ${err}`);
        }
    }
    return includedModuleParams;
}

// TODO: make it work with CSS if it doesn't already
// needs an array of content script parameters
async function registerContentScriptArray(scriptArray) {
    if (scriptArray.length === 0) {
        console.log('No content scripts to register.');
        return;
    }
    try {
        await browser.scripting.registerContentScripts(scriptArray);
        console.log('Content scripts registered successfully.');
    } catch (err) {
        console.error(`Failed to register content scripts: ${err}`);
    }
}

// for one content script, wrap in an array
async function registerContentScript(contentScriptParamsObj) {
    registerContentScriptArray([contentScriptParamsObj]);
}

// needs an array of content script IDs
async function unregisterContentScriptIDArray(scriptIDArray) {
    if (scriptIDArray.length === 0) {
        console.log('No content scripts to unregister.');
        return;
    }
    try {
        await browser.scripting.unregisterContentScripts({
            ids: scriptIDArray,
        });
        console.log('Content scripts unregistered successfully.');
    } catch (err) {
        console.error(`failed to unregister content scripts: ${err}`);
    }
}

// for one content script, wrap in an array
async function unregisterContentScriptID(scriptID) {
    unregisterContentScriptIDArray([scriptID]);
}

// on starting the extension, check if the modules are enabled and register them
(async () => {
    const includedModuleParams = await includeModuleParams(includedModules);
    await registerContentScriptArray(includedModuleParams);
})();

// Listen for messages from the popup script to update the content scripts
browser.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.action === "setData") {
        Object.entries(message.data).forEach(([key, value]) => {
            if (value.enabled) {
                // Register the content script if it is enabled
                registerContentScript(includedModules[key].contentScriptParams);
            }
            else {
                // Unregister the content script if it is disabled
                unregisterContentScriptID(includedModules[key].contentScriptParams.id);
            }
        });
    }
});
